<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>Lightning Fire Dragon's Roar (雷炎竜の咆哮 Raienryū no Hōkō): Natsu's alternate, lightning-enhanced version of his Fire Dragon's Roar. Natsu gathers and combines lightning and fire in his mouth, subsequently releasing them in a large, destructive, sparking blast. This spell is capable of traveling great distances, wreaking havoc wherever it passes, as shown when it crossed half of Tenrou Island, generating a large explosion. In spite of the fact that this spell is potentially powerful enough to kill a person, a single use is enough to heavily strain Natsu's body and completely drain him of all his Magic Power. 

Lightning Fire Dragon's Fist: Natsu's alternate version of his Fire Dragon's Iron Fist. Natsu engulfs his hand in lightning and flame, and, in addition to being burned after being struck, his opponent's are also struck by a bolt of lightning.

Lightning Fire Dragon's Firing Hammer (雷炎竜の撃鉄 Raienryū no Gekitetsu): Natsu engulfs his fist and forearm in fire and lightning and devastatingly strikes his opponent. Even with its power diffused by Minerva's defense, it was still strong enough to blow away most of the top floor of a large building. 

Lightning Fire Dragon's Brilliant Flame: Natsu's alternate, more powerful version of his Fire Dragon's Brilliant Flame. Natsu engulfs his left hand in lightning and his right hand in flames, and, after bringing the two together, generates a large, destructive, sparking blast around his opponent.</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Crimson Lotus: Exploding Lightning Blade (紅蓮爆雷刃 Guren Bakuraijin): Natsu's alternate, lighting-enhanced version of his Crimson Lotus: Exploding Flame Blade. Natsu engulfs one hand in lightning and the other in flames. By swinging his arms around, Natsu creates a highly destructive vortex of fire and lightning, which greatly damages the opponent and pushes them away with tremendous force. This spell is powerful enough to defeat the almighty Guild Master of Grimoire Heart, Hades, in a single hit.</value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>Black Fire Dragon Mode: After absorbing the flames of Dark Regulus, Natsu is capable of combining these flames with their own for destructive effects. However, consumption of the flames of Dark Regulus rendered Natsu temporarily immobile, he soon recovered and became able to use the Dragon Mode at will.

Exploding Flame Blade of Darkness: After absorbing the flames of Dark Regulus, Natsu can use Eclipse Leo's spell to blast away his opponents by combining his own flames with the dark ones.

Darkness Phoenix Blade: An alternate version of Crimson Lotus: Phoenix Blade, Natsu gathers the flames of his Fire Dragon Slayer Magic and the dark flames of Dark Regulus in his hand, and then cloaks his body in the aforementioned flames before rushing at his target of desire</value>
  </data>
  <data name="richTextBox5.Text" xml:space="preserve">
    <value>Fire Dragon King Mode (モード炎竜王 Mōdo Enryūō): After ten months of training to store and manipulate Igneel's remaining power bequeathed to him, Natsu is capable of using the power of the Fire Dragon King. However, because it is not Natsu's own power, he is only capable of using it once, believing it to be strong enough for him to defeat Zeref.</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
</root>